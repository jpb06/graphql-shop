# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type GqlAddress {
  id: ID!
  street: String!
  zipCode: String!
  city: String!
  country: String!
}

type GqlNewAddressOutput {
  id: ID!
  street: String!
  zipCode: String!
  city: String!
  country: String!
}

type GqlAuthOutput {
  id: ID!
  email: String!
  lastName: String!
  firstName: String!
  joinDate: DateTime!
  role: String!
  token: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GqlLoggedUser {
  id: ID!
  email: String!
  lastName: String!
  firstName: String!
  joinDate: DateTime!
  role: String!
  token: String!
}

type GqlCategory {
  id: ID!
  name: String!
}

type GqlProduct {
  id: ID!
  idCategory: ID!
  name: String!
  description: String!
  image: String!
  price: Float!
  stock: Int!
}

type GqlProductWithCategory {
  id: ID!
  idCategory: ID!
  name: String!
  description: String!
  image: String!
  price: Float!
  stock: Int!
  category: GqlCategory!
}

type GqlPaginatedProductsOutput {
  id: Int!
  data: [GqlProductWithCategory!]!
  hasMoreData: Boolean!
}

type GqlCategoryWithProducts {
  id: ID!
  name: String!
  products: [GqlProduct!]!
}

type GqlOrderedItem {
  id: ID!
  quantity: Int!
  name: String!
  image: String!
  price: Float!
}

type GqlOrder {
  id: ID!
  idUser: ID!
  idCreditCard: ID!
  createdAt: DateTime!
  creditCardNumber: String!
  items: [GqlOrderedItem!]!
}

type GqlPlaceOrderOutput {
  orderId: Int!
}

type GqlPartialCreditCard {
  number: String!
  expires: String!
}

type GqlPartialOrderedItem {
  id: ID!
  quantity: Int!
  name: String!
  price: Float!
}

type GqlUserOrder {
  createdAt: DateTime!
  creditCard: GqlPartialCreditCard!
  items: [GqlPartialOrderedItem!]!
}

type Query {
  products: [GqlProductWithCategory!]!
  productsByPage(pagination: GqlPaginationArgs!, filters: GqlPaginatedProductsFiltersInput!, sort: GqlPaginatedProductsSortingInput!): GqlPaginatedProductsOutput!
  productsWithIds(ids: [Int!]!): [GqlProductWithCategory!]!
  product(id: Int!): GqlProductWithCategory!
  categories: [GqlCategoryWithProducts!]!
  category(id: Int!): GqlCategoryWithProducts!
  me: GqlLoggedUser!
  getOrder(id: Int!): GqlUserOrder!
  myOrders: [GqlOrder!]!
  myAddresses: [GqlAddress!]!
}

input GqlPaginationArgs {
  offset: Int = 0
  limit: Int = 25
}

input GqlPaginatedProductsFiltersInput {
  categoriesIds: [Int!]
  text: String
  price: Int
  priceCondition: NumberCondition
  availableStock: Boolean
}

enum NumberCondition {
  gte
  lte
}

input GqlPaginatedProductsSortingInput {
  field: SortField
  direction: SortDirection
}

enum SortField {
  price
  name
}

enum SortDirection {
  asc
  desc
}

type Mutation {
  signup(email: String!, lastName: String!, firstName: String!, password: String!): GqlAuthOutput!
  login(username: String!, password: String!): GqlAuthOutput!
  placeOrder(creditCard: GqlPlaceOrderInput!, orderedItems: [GqlNewOrderedItem!]!): GqlPlaceOrderOutput!
  createAddress(street: String!, zipCode: String!, city: String!, country: String!): GqlNewAddressOutput!
}

input GqlPlaceOrderInput {
  number: String!
  name: String!
  expires: String!
  cvc: String!
}

input GqlNewOrderedItem {
  idProduct: Int!
  quantity: Int!
}